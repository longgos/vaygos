<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
	http://www.springframework.org/schema/context  
	http://www.springframework.org/schema/context/spring-context-3.1.xsd  
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<mvc:annotation-driven/>
	<mvc:default-servlet-handler/>
	<context:component-scan base-package="com.ways.controller"/>
	<context:component-scan base-package="com.tool.web.interceptor"/>
	
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
	class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	
	
	<!-- veloCity模板引擎 -->
	<!-- <bean id="velocityConfig" 
		class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		#parse指令所包含的文件也是基于resourceLoaderPath中所设置的目录。
        <property name="resourceLoaderPath" value="/WEB-INF/templates/" />模板存放的路径
        <property name="configLocation" value="classpath:velocity.properties" />
    </bean>
    
     配置视图的显示 
    <bean id="vmViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
     	<property name="toolboxConfigLocation" value="/WEB-INF/toolbox.xml"/> toolbox配置文件路径 
        <property name="cache" value="true" />
        <property name="prefix" value="/" />视图文件的前缀，即存放的路径  
		<property name="suffix" value=".vm" />
		<property name="contentType" value="text/html;charset=UTF-8" />
        <property name="order" value="1" /> 多ViewResovler配置
        <property name="exposeSpringMacroHelpers" value="true" /> 是否使用spring对宏定义的支持  
        <property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="redirectContextRelative" value="true" />
		<property name="requestContextAttribute" value="request" />
		<property name="redirectHttp10Compatible" value="true" /> 
        <property name="allowRequestOverride" value="true" />  
        <property name="dateToolAttribute">  
           <value>dateTool</value> 日期函数名称  
        </property>  
        <property name="numberToolAttribute">  
           <value>numberTool</value> 数字函数名称  
        </property>
    </bean> -->
	
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" />	<!-- JSON转换器 -->
			</list>
		</property>
	</bean>
	
	
	
	<!-- 定义跳转的文件的前后缀 ，视图模式配置-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/WEB-INF/" />
		<property name="suffix" value=".jsp" />
	</bean>
	
	 
	<!--！！！！！！！新增加的webuploader上传组件,必须要屏蔽这里的拦截机制！！！！！！！ -->
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<!-- <bean id="multipartResolver"  
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        默认编码
        <property name="defaultEncoding" value="utf-8" />  
        文件大小最大值
        <property name="maxUploadSize" value="10485760000" />  
        内存中的最大值
        <property name="maxInMemorySize" value="40960" />  
    </bean> --> 
    
    <!-- 配置基础拦截器 -->
	<!-- <mvc:interceptors>
        	<bean class="com.tool.web.interceptor.BaseInterceptor"/>
    </mvc:interceptors> -->
</beans>

